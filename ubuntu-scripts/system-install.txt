#
Install Ubuntu with LVM (Logical Volume Management)
- Use "Advanced" partitioning and create DATA volume?


#
Make Linux use 'Local' time
- edit /etc/default/rcS
- add or change the following section
	# Set UTC=yes if your hardware clock is set to UTC (GMT)
	UTC=no

#
UFW
- sudo ufw enable
- sudo apt-get install gufw


#
Users
- sudo adduser mortennp
- sudo adduser mortennp sudo


#
Upgrade
- sudo apt-get update
- sudo apt-get upgrade
- DO NOT:
	* (Start System Updater aka update-manager, set "Notify me of new Ubuntu version" to "For any new version")
	* sudo do-release-upgrade, or (use System Updater)


#
Always show GRUB
- sudo apt-get install gksu

Run Gedit as root (gksu gedit), and open the file /etc/default/grub. There should be something like this in there:

GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true

Change it to this:

GRUB_HIDDEN_TIMEOUT=10
GRUB_HIDDEN_TIMEOUT_QUIET=false

Also set GRUB_DEFAULT to zero-based index of full text of default menu item.

Save it, run sudo update-grub from a terminal, and reboot. The GRUB menu should show up.


#
Git clone scripts
- sudo apt-get install git
- git config --global user.email "mortennp@hotmail.com"
- git config --global user.name "mortennp"
- git config --global push.default simple
- cd ~/Documents
- git clone https://github.com/mortennp/misc.git


#
Hide disks rule
- (Edit 99-hide-disks.rules if new HDDs)
- sudo cp ~/Documents/misc/ubuntu-scripts/99-hide-disks.rules /etc/udev/rules.d/


#
Chrome
- Download 64 bit .deb file and select "Yes" to open with Ubuntu Software Center


#
(X11)
- https://help.ubuntu.com/community/VideoDriverHowto
- BACKUP: sudo cp /etc/X11/xorg.conf /etc/X11/xorg.conf.old
- CONFIGURE A: gksu gedit /etc/X11/xorg.conf
- CONFIGURE B (1/2): X -configure
- CONFIGURE B (2/2): cp /root/xorg.conf.new /etc/X11/xorg.conf
- REVERT: sudo cp /etc/X11/xorg.conf.old /etc/X11/xorg.conf
If reverting back to the original xorg.conf file does not work for whatever reason and you are stuck in the terminal, you can execute the following command:
- sudo dpkg-reconfigure -phigh xserver-xorg 


#
CUDA
- sudo apt-get install lm-sensors
- lspci | grep -i nvidia
- gcc --version
- (Download .deb CUDA Toolkit)
- sudo dpkg -i cuda-repo-<distro>_<version>_<architecture>.deb
- sudo apt-get update
- sudo apt-get install cuda
- (ln -s /usr/local/<install-dir> /usr/local/cuda)
- cd ~/Documents/misc/ubuntu-scripts
- sh cuda-export-paths.sh
- cat /proc/driver/nvidia/version
- ./usr/local/cuda/bin/cuda-install-samples-7.0.sh <dest-dir>
- cd <dest-dir>
- make
- run deviceQuery
- sudo apt-get install build-essential libopencv-dev linux-headers-`uname -r`
- To blacklist nvidia driver for X11 so Nsight can debug/break in .cu files:
- 	sudo cp ~/Documents/misc/ubuntu-scripts/blacklist-nvidia.conf /etc/modprobe.d/
-	sudo update-initramfs -u

"
A modprobe blacklist file has been created at /etc/modprobe.d to prevent Nouveau from loading. This can be reverted by deleting /etc/modprobe.d/nvidia-graphics-drivers.conf.
A new initrd image has also been created. To revert, please replace /boot/initrd-3.16.0-49-generic with /boot/initrd-$(uname -r)-backup.
"

#
(Gparted / LVM)
- sudo apt-get install gparted
- sudo apt-get install system-config-lvm


#
KVM
- https://help.ubuntu.com/community/KVM/Installation
- egrep -c '(vmx|svm)' /proc/cpuinfo	# must return 1 or more
- sudo apt-get install cpu-checker
- kvm-ok 				# must output "KVM acceleration can be used"
- egrep -c ' lm ' /proc/cpuinfo		# must return 1 or more ('lm' stands for Long Mode aka 64 bit)
- uname -m				# must return x86_64 (to serve more than 2 GB to guest OS)
- sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils
- sudo adduser `id -un` libvirtd
- Logout, login
- virsh -c qemu:///system list		# must return (empty) list with headers Id, Name, State
- sudo apt-get install virt-manager	# GUI


#
Oracle Java
- Cf. oracle-java.txt


#
Android Studio
- https://developer.android.com/sdk/installing/index.html?pkg=studio
- Download AS
- Unzip to /usr/local/android-studio
- sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1
- sudo desktop-file-install ~/Documents/misc/ubuntu-scripts/android-studio.desktop
- Start AS from Dash and download SDK
- Run emulator with ~/Documents/misc/ubuntu-scripts/run-avd-*.sh
- (only x86 CPU/ABI instances supported)


#
Revolution R Open + MKL + RStudio
- Download RRO and MKL
- sha1sum -c RRO-3.2.0-Ubuntu-14.04.x86_64.tar.gz.sha1
- sha1sum -c RevoMath-3.2.0.tar.gz.sha1 
- sudo apt-get update
- tar -xzf RRO-3.2.0-Ubuntu-14.04.x86_64.tar.gz
- cd RRO-3.2.0
- sudo ./install.sh
- cd ..
- tar -xzf RevoMath-3.2.0.tar.gz
- cd RevoMath
- sudo ./RevoMath.sh
- Download RStudio .deb and open with Software Center
- sudo apt-get build-dep libcurl4-gnutls-dev
- sudo apt-get install libcurl4-gnutls-dev
- sudo apt-get install libxml2-dev
- Open RStudio and execute "install.packages("devtools")"


#
Emacs
- sudo apt-get install emacs24


#
Anaconda
- Download from continiuum.io
- bash Anaconda3-2.2.0-Linux-x86_64.sh 
- 	select /home/mortennp/Anaconda3 as location
- 	select "no" to update PATH in .bashrc
- 	instead use: export PATH=/home/mortennp/Anaconda3/bin:$PATH
- sudo desktop-file-install ~/Documents/misc/ubuntu-scripts/spyder.desktop
- conda update conda
- conda update anaconda
- pip install line_profiler
- %load_ext line_profiler
- %lprun ...
- pip install -U memory_profiler
- pip install psutil
- %load_ext memory_profiler
- %mprun ...
- (https://github.com/Nodd/spyder_line_profiler)


#GraphLab Create
# Create a new conda environment with Python 2.7.x
conda create -n dato-env python=2.7 anaconda
# Activate the conda environment
source activate dato-env
# Ensure pip is updated to the latest version
# mini conda users may need to install pip first, using 'conda install pip'
conda update pip
# Install your licensed copy of GraphLab Create
pip install --upgrade --no-cache-dir https://get.dato.com/GraphLab-Create/1.8.1/mortennp@hotmail.com/273A-8803-FA50-AB78-26EB-D5F7-CC13-FDF0/GraphLab-Create-License.tar.gz
# Install or update IPython and IPython Notebook
# mini conda users may need to install first, using 'conda install ipython ipython-notebook'
conda update ipython ipython-notebook


#TensorFlow
conda create -n tf-env python=2.7 anaconda
source activate tf-env
conda update pip
pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.6.0-cp27-none-linux_x86_64.whl --ignore-installed


#
VirtualBox
- (https://help.ubuntu.com/community/VirtualBox/Installation)
- sudo sh -c "echo 'deb http://download.virtualbox.org/virtualbox/debian '$(lsb_release -cs)' contrib non-free' > /etc/apt/sources.list.d/virtualbox.list"
- wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
- sudo apt-get update
- sudo apt-get install virtualbox-4.3 dkms


#
GLFW3 (arrayfire dependency)
- https://github.com/arrayfire/arrayfire/wiki/GLFW-for-ArrayFire
- sudo apt-get install build-essential cmake cmake-curses-gui xorg-dev libglu1-mesa-dev
- wget https://github.com/glfw/glfw/archive/3.0.4.zip -O glfw-3.0.4.zip
- unzip glfw-3.0.4.zip
- cd glfw-3.0.4
- mkdir build
- cd build
- cmake .. -DBUILD_SHARED_LIBS=ON
- make -j8
- sudo make install


#
arrayfire
- sudo apt-get install -y build-essential git subversion cmake libfreeimage-dev
- sudo apt-get install -y cmake-curses-gui
- sudo apt-get install libboost-all-dev
- sudo apt-get install libglew-dev libglewmx-dev # libglfw3-dev
- git clone https://github.com/arrayfire/arrayfire.git
- cd arrayfire
- git submodule init
- git submodule update
- mkdir build && cd build
- cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_CUDA=ON -DBUILD_OPENCL=ON # Enables building all 3 backends
- make -j4
- sudo make install
